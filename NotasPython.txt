Teoria

Con el comando import, estamos trayendo un modelo.

Evitar usar un nombre para el fichero python como alguno de los modelos a importar.

En el metodo print se concatena con las ','

Variables

	* El nombre de las variables no puede contener caracteres raros o numeros
	* Variables con declaracion implicita, segun el valor que contiene (int, string, float)
	* Se usa el operador "+" para concatenar textos
	* Para las listas se usa el operador [], Con el comando list(range(inicio, final)) se puede crear una lista con los numeros comprendidos entre el inicio y el final (este no esta incluido)
		- Comando append para añadir un nuevo valor
		- Comando clear para limpiar la lista
		- Comando index para recuperar la posicion de un valor de la lista, permite indicar el intervalo de elementos en el que buscar en la lista (start, stop)
		- Se utiliza el operador [] para indicar la posicion de un elemento en la lista. Si dentro se utiliza la sintaxis x:y se recupera una sublista empezando por el elemento x y llega hasta el elemento antes de y
			Si no se indica el valor y, se llega hasta el final de la lista. Con los indices negativos se empieza a contar desde el final de la lista (-1, -2, -3....)
	* Para usar diccionarios de datos se utiliza el operador {}
		- Los diccionarios utilizan el operador [] tambien pero necesitan que se indique la key de el valor buscado, no la posicion
	* Para usar una tupla de datos se utiliza el operador ()
		- La diferencia entre las tuplas y las listas, es que las primeras son inmutables mientras que las segundas son mutables, esto quiere decir que a las listas puedes añadir o quitar elementos
	* Los strings se comportan como una lista de caracteres, por lo que se pueden utilizar los metodos de las listas para acceder a sus caracteres, o generar substrings

Metodo dir(type) indica todas las propiedades de las que dispone el tipo indicado
	* dir(__builtins__) -> Indica las funciones disponibles en python
Metodo help(type.attributte) muestra lo que hace el atributo seleccionado

Funciones

	* Utilizar la expresion "def" para indicar que se va a definir una funcion, el final de la declaracion se indica con ":". Las lineas dentro de la funcion tienen que tener una identacion de 4 espacios.
	* Si no se indica un return en la funcion, python asume que se devolvera un None. Un print en la función no actua como un return, siempre devolvera un None aparte la función.

Condicionales
	* Cuando se quieren anidar condiciones se utilizara los operadores "and" y "or"
	* Para comprobar el type de una variable se puede usar la funcion isinstance(valor, type)
	* Usar el termino elif para añadir condiciones a distintos casos (else if)

Uso de espacios en blanco
	* Despues de una condicion se puede añadir la cantidad de espacios que se quieran pero no es una buena practica.
	* Entre valores y operadores pueden haber o no espacios
	* Dentro de una funcion es necesarios que las lineas tengan identacion con respecto a la definicion de la funcion (buena practica es 4)
	
Input
	* Para generar un input donde escribir valores usar el comando input(Texto antes del input).
	* Lo que se escribe en el campo input es tratado como un string, es necesario realizar un casteo al tipo que buscamos.
	
String
	* El tratamiento de variables es string se hace con el comando "adfasd %s" & variable , la variable sustituira el valor de %s. Funciona en python 2 y python 3. Para multiples variables añadir un %s para cada una de ellas
		y añadir el listado de variables entre parentesis con comas
	* Tambien se pueden tratar con el comando f"{variable}" antes del texto a escribir y añadiendo las variables entre corchetes dentro del string. Solo funciona a partir de python 3.6. Para multiples variables añadir un 
		parametro entre {} por cada uno de ellos.

Bucles
	* La sintaxis del bucle for sera "for variable in array:", funciona como un foreach
	* En los diccionarios podemos elegir iterar entre las claves .key, los valores .values o los items .items con los que recuperaremos las tuplas. Se puede recuperar la key y el valor al mismo tiempo si usamos el bucle sobre
		los items
	* La sintaxis del bucle while sera "while condicion:". Se puede utilizar el comando break para salir del bucle y continue para pasar a la siguiente iteracion

ListComprehensions
	* Es una manera de construir listas a partir de otras listas. En la generacion de la nueva lista iteramos los datos de la lista existente y la tratamos para generar la nueva.
		[tratar elemento for elemento in lista] -> ex: [temp / 10 for temp in temps]
	  Se pueden añadir condicionales para excluir elementos de la lista original [tratar elemento for elemento in lista if condicion elemento]
	  Si queremos añadir un else a nuestra condicion debemos modificar la sintaxis [tratar elemento if condicion elemento else elemento for elemento in lista] pasando delante la condicion del bucle

Funciones
	* Al pasar varios parametros a una funcion los podemos identificar de dos maneras
		- Non keyword arguments funcion(5, 4), estos argumentos se asocian a los  parametros de la función por su posicion en la llamada
		- Keyword arguments funcion(b=5, a=4) la posicion de los argumentos no importa ya que se asocia su variable al parametro de la llamada.
	* En la definicion de la funcion se les puede asignar valores por defecto a los parametros, pero estos siempre tienen que estar despues de los parametros que no tengan valor por defecto def funcion(a, b=5)
	* Se puede definir una funcion con un numero de parametros indefinidos con la sintaxis def funcion(*args). Una vez llamada solo aceptara Non Keyword arguments. Los argumentos trabajan como una tupla.
	* Si queremos definir una funcion con un numero de parametros indefinidos del tipo Keyword argument la sintaxis sera def funcion(**kwargs). No admitira argumentos del tipo non keyword. Los argumentos trabajan como un
	diccionario

Ficheros
	* Para leer un fichero tan solo hay que llamar a la funcion open(rutaFichero), el objeto devuelto por esta funcion se puede escribir en pantalla llamando al .read()
		Cuando un fichero se abre el cursor se pone delante del primer caracter, cuando se llama a read() el cursor pasa a estar situado detras del ultimo caracter, de tal manera que si volvemos a llamar al metodo read no
		imprimira nada. Para solucionar esto debemos guardar el valor de read() en una variable y podremos imprimir tantas veces como queramos.
	* Es recomendable cerrar un fichero cuando se deja de utilizar con la funcion close()
	* El fichero tambien se puede abrir con la sintaxis "with open() as myfile:"